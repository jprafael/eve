#ifndef EVE_SCANNER_HH
#define EVE_SCANNER_HH

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL	                                \
	eve::parser::token_type	eve::scanner::_lex( \
		eve::parser::semantic_type* yylval,     \
		eve::parser::location_type* yylloc		\
	)

#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer EVEFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif


#include "parser.hh"
#include <queue>

namespace eve {

/** scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to EveFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the scanner class. This is required
 * because the yylex() defined in EveFlexLexer has no parameters. */
class scanner : public EVEFlexLexer
{
	eve::driver* driver;
	int _indent;
	std::queue<parser::token_type> queue;

public:
	/** Create a new scanner object. The streams arg_yyin and arg_yyout default
	 * to cin and cout, but that assignment is only made when initializing in
	 * yylex(). */
	scanner(
		eve::driver* driver,
		std::istream* arg_yyin = 0,
		std::ostream* arg_yyout = 0);

	/** Required for virtual functions */
	virtual ~scanner();

	/** This is the main lexing function. It is generated by flex according to
	 * the macro declaration YY_DECL above. The generated bison parser then
	 * calls this virtual function to fetch new tokens. */
	virtual parser::token_type lex(
		parser::semantic_type* yylval,
		parser::location_type* yylloc
	);

	/** Enable debug output (via arg_yyout) if compiled into the scanner. */
	void set_debug(bool b);

	/* generated by bison */
	eve::parser::token_type _lex(eve::parser::semantic_type* yylval, eve::parser::location_type* yylloc);

private:
	int indent(eve::parser::location_type* yylloc, std::string whitespace);
	void enqueue(eve::parser::token_type token);
};

} // namespace eve

#endif // EVE_scanner_H
